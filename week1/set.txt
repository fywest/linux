
                                ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    ;;
                    "<"*)
                    *'<'*)
                    *'>'*)
                    *)
                -*)
                -*)
                -*)
                -*)
                ;;
                ;;
                ;;
                ;;
                ;;
                ;;
                ;;
                ;;
                ;;
                ;;
                ;;
                ;;
                }
                }
                };
                };
                *)
                *)
                *)
                *)
                *)
             }
            ---*)
            --?*)
            --*)
            -?*)
            -)
            -)
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            ;;
            :;
            "")
            "")
            *'<'*)
            *'>'*)
            *)
            *)
            *)
            *)
            *)
            *)
            *)
            *)
            \[--*\])
         }
        --*=)
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ;;
        ))
        ));
        ));
        ));
        }
        }
        *)
        *)
        *)
        *)
        *)
        *)
        *)
        *)
        *[?*+\!@]\(*\)*)
        *[*?[]*)
        *@*)
        \`*)
        \`*\`)
        \~*/*)
        \~*)
        \$*)
        \$\(*)
        \$\(*\))
        \$\{*)
        \$\{*\})
    "$@"
    { 
    { 
    }
    };
    };
    };
    };
    };
 ';
 ';
_=
,/|';
';
';
';
';
';
';
';
';
';
';
';
';
';
';
';
'};
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
{ 
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}";
}";
}";
}";
*}";
*}";
*}";
*}";
            "0	"*)
            "0	"*)
            *"	0")
            *"	0")
            "0	0")
            "0	0")
        0 | 1)
    [[ "$1" == -a || "$2" == -a ]] && options=-a;
    [[ "$1" == -c || "$2" == -c ]] && options+=" -c";
            [[ "$1" == mkdir ]] && compopt -o nospace;
                    2'>'*)
            2'>'*)
        2 | 3)
    } 2>/dev/null | awk         '/^[^ \t]/ { if ($1 ~ /^[0-9]+:/) { print $2 } else { print $1 } }' ));
    [[ ${!2} == \$* ]] && eval $2=${!2}
    [[ ${!2} == *\\* ]] && printf -v $2 %s "${1//\\\\/\\}";
            4)
            6)
            -a*)
            a)
a=123
                        ((ahead++))
                aliases='yes'
_allowed_groups () 
                    _allowed_groups "$mycur";
                _allowed_groups "$mycur";
_allowed_users () 
                    _allowed_users "$cur";
_apport-bug () 
        apport-cli)
_apport-cli () 
        apport-collect)
_apport-collect () 
                    _apport_parameterless
                    _apport_parameterless
                    _apport_parameterless
                    _apport_parameterless
_apport_parameterless () 
_apport_symptoms () 
        apport-unpack)
_apport-unpack () 
    arg=;
            arg=${COMP_WORDS[i]};
    args=1;
_available_interfaces () 
                    awkcur="^$awkcur";
                awkcur="^$awkcur.*[.:]";
            awkcur="^$awkcur[.:]*";
        awkcur=${awkcur//\./\\\.};
                    awkcur="[a-z.:]";
        awkcur=${cur//\//\\\/};
            $( awk '{ print $1 }' /etc/dfs/fstypes 2>/dev/null )
            $( awk '! /\*/ { print $NF }' /etc/filesystems 2>/dev/null )";
            $( awk '/^[ \t]*[^#]/ { print $3 }' /etc/mnttab 2>/dev/null )
            $( awk '/^[ \t]*[^#]/ { print $4 }' /etc/vfstab 2>/dev/null )
        --+([-a-z0-9_]))
                -?(\[)+([a-zA-Z0-9?]))
                    b="$(
_backup_glob='@(#*#|*@(~|.@(bak|orig|rej|swp|dpkg*|rpm@(orig|new|save))))'
BASH_ALIASES=()
BASH_ARGC=()
BASH_ARGV=()
BASH=/bin/bash
BASH_CMDS=()
BASH_COMPLETION_VERSINFO=([0]="2" [1]="8")
BASH_LINENO=()
BASHOPTS=checkwinsize:cmdhist:complete_fullquote:expand_aliases:extglob:extquote:force_fignore:histappend:interactive_comments:progcomp:promptvars:sourcepath
BASH_REMATCH=()
            bash.showupstream)
BASH_SOURCE=()
BASH_VERSINFO=([0]="4" [1]="4" [2]="19" [3]="1" [4]="release" [5]="x86_64-pc-linux-gnu")
BASH_VERSION='4.4.19(1)-release'
                    b="($b)";
    b=${b##refs/heads/};
                        ((behind++))
            b="GIT_DIR!";
        b="\${__git_ps1_branch_name}";
                b="$(git symbolic-ref HEAD 2>/dev/null)";
                b="${head#ref: }";
    [[ "$( bind -v )" == *$1+([[:space:]])on* ]]
    boot_dir=${boot_dir-/boot};
            --boot-directory)
        --boot-directory)
        --boot-directory)
                boot_dir="${i##*=}";
				(branch)
        branch_color="$bad_color";
        branch_color="$ok_color";
                break
                break
                break
                break
            break;
            break;
            break;
            c)
            c)
        case $1 in 
    case "${1##*/}" in 
            case ${argtype,,} in 
    case "$c" in 
        case $cmd in 
        case $cmd in 
                case "$commit" in 
    case "$(complete -p ${1##*/} 2> /dev/null)" in 
        case "$count" in 
        case "$count" in 
            case "$cur" in 
            case "$cur" in 
            case "$cur" in 
            case "$cur" in 
        case $cur in 
    case "$cur" in 
                            case "$(file -b $s 2> /dev/null)" in 
        case $flag in 
        case $flag in 
        case $flag in 
				case "${GIT_PS1_DESCRIBE_STYLE-}" in
        case "$i" in 
        case "$i" in 
        case $i in 
        case $i in 
    case "$#" in 
        case "$key" in 
        case "$last" in 
        case "$last" in 
        case ${!OPTIND} in 
            case $option in 
        case "$option" in 
                case $prev in 
                case $prev in 
    case "${prev,,}" in 
    case "$prev" in 
    case "$prev" in 
    case "$prev" in 
    case "$prev" in 
    case "$prev" in 
    case "$prev" in 
    case "$prev" in 
    case "$prev" in 
    case "$prev" in 
    case "$prev" in 
    case $prev in 
    case "$upstream" in 
                cat
                cat
            c="BARE:";
    c="$branch_color$c";
                c=$((++c));
        -C | --config-file)
        -c | --crash-file)
                 -c --crash-file --save -v --version --tag -w --window';
_cd () 
    cd='*-?(c)d*';
_cd_devices () 
                        char=${option:i:1};
                        [[ $char != '[' ]] && printf '%s\n' -$char;
CLUTTER_IM_MODULE=xim
COLORTERM=truecolor
COLUMNS=79
    _command
_command () 
command_not_found_handle () 
_command_offset () 
    _command_offset $offset
            compcmd=${cmd##*/};
    ((COMP_CWORD -= $word_offset));
            compfile="$dir/$compfile";
        compgen -d -- "$(quote_readline "$cur")" | {
                       compgen -G "${cur}*.crash" ))
                       compgen -G "${cur}*.crash" ))
_complete_as_root () 
    complete -F _minimal -- "$cmd" && return 124
_completion_loader () 
            _completion_loader $compcmd;
            COMP_LINE=${COMP_LINE:1};
        COMP_LINE=${COMP_LINE#"${COMP_WORDS[i]}"};
            [[ "$COMP_LINE" == "${COMP_WORDS[i]}"* ]] && break;
            compopt -o filenames;
        compopt -o filenames;
        compopt -o filenames;
    compopt -o filenames;
        compopt -o filenames 2> /dev/null;
                                    compopt -o nospace;
                compopt -o nospace;
        compopt -o nospace;
                    compopt -o $opt;
            ((COMP_POINT--));
        ((COMP_POINT-=${#COMP_WORDS[i]}));
    COMPRELY=();
            COMPREPLY=("");
            COMPREPLY=()
    COMPREPLY=();
    COMPREPLY=();
    COMPREPLY=();
    COMPREPLY=();
    COMPREPLY=();
    COMPREPLY=();
    COMPREPLY=();
    COMPREPLY=();
    COMPREPLY=();
    COMPREPLY=();
    COMPREPLY=();
    COMPREPLY=();
    COMPREPLY=();
    COMPREPLY=();
    COMPREPLY=();
    COMPREPLY=();
    COMPREPLY=();
    COMPREPLY=($( {
            COMPREPLY[0]="${i}/";
            COMPREPLY=($( apt-cache pkgnames $cur 2> /dev/null ))
    COMPREPLY+=($( { arp -an || ip neigh show; } 2>/dev/null | command sed -ne         "s/.*[[:space:]]\($re\)[[:space:]].*/\1/p" -ne         "s/.*[[:space:]]\($re\)[[:space:]]*$/\1/p" ));
                COMPREPLY+=(${arrs[*]});
            COMPREPLY+=($( awk 'BEGIN {FS=","}
                COMPREPLY+=("${BASH_REMATCH[1]}${BASH_REMATCH[2]}[${BASH_REMATCH[3]}]}");
    COMPREPLY+=($( command sed -ne         "s/^[[:space:]]*\($re\)[[:space:]].*/\1/p" /etc/ethers 2>/dev/null ));
        COMPREPLY+=($( compgen -A hostname -P "$prefix$user" -S "$suffix" -- "$cur" ));
            COMPREPLY=($(compgen -A hostname -P '@' -S ':' -- ${c#*@}))
            COMPREPLY+=($( compgen -A variable -P '$' -- "${BASH_REMATCH[3]}" ));
            COMPREPLY=($( compgen -c -- "$cur" ));
            COMPREPLY=($(compgen -c -P '$(' -S ')'  -- ${c#??}))
            COMPREPLY=($(compgen -c -P '\`' -S '\`' -- ${c#?}))
        COMPREPLY=($( compgen -d -c -- "$cur" ));
                COMPREPLY=($(compgen -d -X "$e" -S / ${_nosp} -- $c));
    COMPREPLY+=($( compgen -f -d -X "!*/?([amrs])cd*" -- "${cur:-/dev/}" ))
    COMPREPLY+=($( compgen -f -d -X "!*/?(r)dvd*" -- "${cur:-/dev/}" ))
                COMPREPLY=($(compgen -f -X "$e" -- $c));
            COMPREPLY=($(compgen -f -X "$e"         -- ${c}))
    COMPREPLY=($( compgen -f -X '!*/*.mod' -- "${grub_dir}/$cur" | {
        COMPREPLY=($( compgen -g -- "$1" ));
            COMPREPLY=($(compgen -G "${c}"))
            COMPREPLY=($(compgen -G "${c}"))
            COMPREPLY=($( compgen -G "${cur}*.apport"
            COMPREPLY=($( compgen -G "${cur}*.apport"
                    COMPREPLY=($( compgen -g -- "$mycur" ));
                COMPREPLY=($( compgen -g -- "$mycur" ));
            COMPREPLY=($( compgen -o default -G "$cur*" ))
            COMPREPLY=($( compgen -o default -G "$cur*" ))
            COMPREPLY=($(compgen -P "${2-}" -W "${1-}" -S "${4-}" -- "$cur"))
        COMPREPLY+=($( compgen -P "$prefix$user"             -S "$suffix" -W "$hosts" -- "$cur" ));
            COMPREPLY=($( compgen -P "$prefix" -W "${COMPREPLY[@]}" ));
        COMPREPLY=($( compgen -P '~' -u -- "${1#\~}" ));
        COMPREPLY=($( compgen -u -- "${1:-$cur}" ));
                    COMPREPLY=($( compgen -u -- "$cur" ));
            COMPREPLY=($(compgen -u ${s}	 	-- ${c}))
        COMPREPLY=($( compgen -u -S @ -- "$cur" ));
            COMPREPLY=($(compgen -v -P '$'          -- ${c#?}))
            COMPREPLY=($(compgen -v -P '${' -S '}'  -- ${c#??}))
            COMPREPLY=($( compgen -W "$(_apport_symptoms)" -- $cur))
        COMPREPLY=($(compgen             -W "$( awk -F "[\"']" '/menuentry/ { print $2 }' $config_file )"             -- "$cur" ));
                COMPREPLY=($( compgen -W "$( command ls -B             /etc/sysconfig/interfaces |             command sed -ne 's|.*ifcfg-\([^*].*\)$|\1|p' )" -- "$cur" ));
    COMPREPLY=($( compgen -W '$( command ls /lib/modules )' -- "$cur" ))
    COMPREPLY=($( compgen -W "$( command ls -RL $modpath 2>/dev/null |         command sed -ne 's/^\(.*\)\.k\{0,1\}o\(\.[gx]z\)\{0,1\}$/\1/p' )" -- "$cur" ))
    COMPREPLY=($( compgen -W '$( command ps axo pgid= )' -- "$cur" ))
    COMPREPLY=($( compgen -W '$( command ps axo pid= )' -- "$cur" ))
        COMPREPLY=($( compgen -W '`command sed -e "y/|/ /" \
        COMPREPLY=($( compgen -W "$( command sed -ne 's|^iface \([^ ]\{1,\}\).*$|\1|p'            /etc/network/interfaces /etc/network/interfaces.d/* 2>/dev/null )"             -- "$cur" ));
    COMPREPLY+=($( compgen -W         "$( command sed -ne 's/^\([^[:space:]#|]\{2,\}\)|.*/\1/p' /etc/termcap             2>/dev/null )" -- "$cur" ));
    COMPREPLY=($( compgen -W '${COMPREPLY[@]}' -- "$cur" ));
    COMPREPLY=($( compgen -W '${COMPREPLY[@]%.*}' -- "${cur//\\\\/}" ));
    COMPREPLY=($( compgen -W '${COMPREPLY[@]/%[[:punct:]]/}' -- "$cur" ))
    COMPREPLY=($( compgen -W '${COMPREPLY[@]#${sysvdirs[0]}/}' -- "$cur" ))
            COMPREPLY=($( compgen -W '$( cut -d: -f3 /etc/group )' -- "$cur" ));
            COMPREPLY=($( compgen -W '$( cut -d: -f3 /etc/passwd )' -- "$cur" ));
                    COMPREPLY=($( compgen -W "$dashoptions" -- $cur ))
                    COMPREPLY=($( compgen -W "$dashoptions" -- $cur ))
                    COMPREPLY=($( compgen -W "$dashoptions" -- $cur ))
                    COMPREPLY=($( compgen -W "$dashoptions" -- $cur ))
            COMPREPLY=($( compgen -W "$dashoptions" -- $cur ))
            COMPREPLY=($( compgen -W "$dashoptions" -- $cur ))
            COMPREPLY=($( compgen -W 'e p t g r v' -- "$cur" ));
        COMPREPLY=($( compgen -W '$( getent group | cut -d: -f3 )'             -- "$cur" ));
        COMPREPLY=($( compgen -W '$( getent passwd | cut -d: -f3 )' -- "$cur" ));
        COMPREPLY=($( compgen -W             "$( id -Gn 2>/dev/null || groups 2>/dev/null )" -- "$1" ));
        COMPREPLY=($( compgen -W             "$( id -un 2>/dev/null || whoami 2>/dev/null )" -- "${1:-$cur}" ));
        COMPREPLY=($( compgen -W "$( LC_ALL=C $1 --help 2>&1 |             command sed -ne 's/.*\(--[-A-Za-z0-9]\{1,\}=\{0,1\}\).*/\1/p' | sort -u )"             -- "$cur" ));
    COMPREPLY+=($( compgen -W         "$( { LC_ALL=C ifconfig -a || ip addr show; } 2>/dev/null | command sed -ne             's/.*addr:\([^[:space:]]*\).*/\1/p' -ne             's|.*inet[[:space:]]\{1,\}\([^[:space:]/]*\).*|\1|p' )"         -- "$cur" ))
            COMPREPLY=($( compgen -W "$param $(_apport_symptoms)" -- $cur))
    COMPREPLY=($( compgen -W "$param" -- $cur))
        COMPREPLY=($( compgen -W '$( _parse_help "$1" -h )' -- "$cur" ));
    COMPREPLY=($( compgen -W "$( PATH="$PATH:/sbin" lsmod |         awk '{if (NR != 1) print $1}' )" -- "$1" ))
    COMPREPLY+=($( compgen -W         "$( PATH="$PATH:/sbin" lspci -n | awk '{print $3}')" -- "$cur" ))
    COMPREPLY+=($( compgen -W         "$( PATH="$PATH:/sbin" lsusb | awk '{print $6}' )" -- "$cur" ))
            COMPREPLY=($( compgen -W '$( perl -e '"'"'while (($gid) = (getgrent)[2]) { print $gid . "\n" }'"'"' )' -- "$cur" ));
            COMPREPLY=($( compgen -W '$( perl -e '"'"'while (($uid) = (getpwent)[2]) { print $uid . "\n" }'"'"' )' -- "$cur" ));
                COMPREPLY=($( compgen -W "-p --package --tag" -- $cur));
            COMPREPLY=($( compgen -W "-p --package --tag" -- $cur))
            COMPREPLY+=($( compgen -W '$(printf %s\\n "${!'${BASH_REMATCH[2]}'[@]}")'             -P "${BASH_REMATCH[1]}${BASH_REMATCH[2]}[" -S ']}' -- "${BASH_REMATCH[3]}" ));
            COMPREPLY=($( compgen -W "$( printf '%s\n'             /etc/sysconfig/network/ifcfg-* |             command sed -ne 's|.*ifcfg-\([^*].*\)$|\1|p' )" -- "$cur" ));
                COMPREPLY=($( compgen -W "$( printf '%s\n'             /etc/sysconfig/network-scripts/ifcfg-* |             command sed -ne 's|.*ifcfg-\([^*].*\)$|\1|p' )" -- "$cur" ));
    COMPREPLY+=($( compgen -W         "$( ruptime 2>/dev/null | awk '!/^ruptime:/ { print $1 }' )"         -- "$cur" ));
        COMPREPLY+=($( compgen -W '${svcs[@]#$xinetddir/}' -- "$cur" ));
                COMPREPLY=($( compgen -W "--tag" -- $cur));
    COMPREPLY+=($( compgen -W "$( { toe -a 2>/dev/null || toe 2>/dev/null; }         | awk '{ print $1 }' | sort -u )" -- "$cur" ))
        COMPREPLY=($( compgen -X '<defunct>' -W '$( command ps axo command= | command sed -e \
        COMPREPLY=($( compgen -X '<defunct>'             -W '$( command ps axo comm | command sed -e 1d )' -- "$cur" ));
        [[ $COMPREPLY == *= ]] && compopt -o nospace;
        [[ $COMPREPLY == *= ]] && compopt -o nospace;
    COMPREPLY=(${COMPREPLY[@]##*/?(:)});
        COMPREPLY=("${COMPREPLY[@]/+([0-9]).+([0-9]).+([0-9]).+([0-9])$suffix/}");
                        COMPREPLY=(${COMPREPLY[@]} $(compgen -f -X "$e" -S / -- $s));
    COMPREPLY=(${COMPREPLY[@]%$comprsuffix});
                                    COMPREPLY=(${COMPREPLY[@]} $s)
                            COMPREPLY=(${COMPREPLY[@]} $s);
        COMPREPLY=("${COMPREPLY[@]/*:*$suffix/}");
                COMPREPLY+=("$cur}");
    COMPREPLY=($( eval command ls "$manpath" 2>/dev/null ));
                COMPREPLY=($( eval compgen "$cspec" -- '$cur' ));
                    COMPREPLY+=($host);
                                    COMPREPLY[i]+=/;
            COMPREPLY[$i]=${COMPREPLY[$i]#"$colon_word"};
            [[ ${COMPREPLY[i]} == */* ]] || COMPREPLY[i]=./${COMPREPLY[i]};
                            COMPREPLY[i]=${COMPREPLY[i]#/usr/share/zoneinfo/};
        COMPREPLY+=($( initctl list 2>/dev/null | cut -d' ' -f1 ));
            COMPREPLY[i]=$prefix$user${COMPREPLY[i]}$suffix;
            COMPREPLY[k++]=${j#$i/};
    COMPREPLY+=($(         { LC_ALL=C ifconfig -a || ip link show; } 2>/dev/null | command sed -ne         "s/.*[[:space:]]HWaddr[[:space:]]\{1,\}\($re\)[[:space:]].*/\1/p" -ne         "s/.*[[:space:]]HWaddr[[:space:]]\{1,\}\($re\)[[:space:]]*$/\1/p" -ne         "s|.*[[:space:]]\(link/\)\{0,1\}ether[[:space:]]\{1,\}\($re\)[[:space:]].*|\2|p" -ne         "s|.*[[:space:]]\(link/\)\{0,1\}ether[[:space:]]\{1,\}\($re\)[[:space:]]*$|\2|p"
    COMPREPLY=($( printf '%s\n' ${sysvdirs[0]}/!($_backup_glob|functions|README) ));
    COMPREPLY+=("${sigs[@]/#${1}SIG/${1}}")
    COMPREPLY+=($( systemctl list-units --full --all 2>/dev/null |         awk '$1 ~ /\.service$/ { sub("\\.service$", "", $1); print $1 }' ));
        COMPREPLY=("${toks[@]}");
        COMPREPLY+=("${toks[@]}");
                COMPREPLY+=(${vars[*]});
COMP_WORDBREAKS=$' \t\n"\'><=;|&(:'
        COMP_WORDS[i]=${COMP_WORDS[i+$word_offset]};
                config+=("$f");
    configfile=$1;
                configfile=$OPTARG
_configured_interfaces () 
				(contains)
                                continue;
            count="";
_count_args () 
            count="$behind	$ahead";
        count="$(git rev-list --count --left-right 				"$upstream"...HEAD 2>/dev/null)";
                create list set unset"
        create | list | set | unset)
            cspec=$( complete -p ${cmd##*/} 2>/dev/null );
            cspec=$( complete -p $compcmd 2>/dev/null );
                cspec=${cspec%%$compcmd};
                cspec=${cspec#complete};
                    cspec=${cspec#*-o };
                    cspec=${cspec#$opt};
            cur)
        cur="$3";
        cur=$COMP_LINE;
    cur=${COMP_WORDS[COMP_CWORD]};
        cur="${cur#*=}";
                    cur="${cur:1}";
                cur="${cur:1}";
        cur="${cur##$redir}";
                    cur="${cur#${words[i]}}";
                cur="${cur#"${words[i]}"}";
        curd=$awkcur;
    cur=`_get_cword`;
    cur=`_get_cword`;
    cur=`_get_cword`;
    cur=`_get_cword`;
    cur=`_get_cword`;
    cur=`_get_cword`;
    cur=`_get_cword`;
    cur=`_get_cword`;
    cur=`_get_cword`;
    cur=`_get_cword`;
    cur=`_get_cword`;
    cur=`_get_cword`;
    cur=`_get_cword`;
    cur=`_get_cword`;
    cur=`_get_cword`;
    cur=${!OPTIND};
    [[ $cur == *@* ]] && user=${cur%@*}@ && cur=${cur#*@};
                        cur=/usr/share/zoneinfo/$cur;
            cword)
    [[ $cword -gt 2 ]] && return;
    [[ $cword -le 0 ]] && return 1;
        *-d*)
                dashoptions="-c --crash-file $dashoptions";
                dashoptions="-f --file-bug $dashoptions";
    dashoptions='-h --help -f --file-bug -u --update-bug -s --symptom \
    dashoptions='-h --help --save -v --version --tag -w --window';
                dashoptions="--save $dashoptions";
                dashoptions="--save $dashoptions";
            dashoptions="--save --tag";
            dashoptions="--save --tag";
                dashoptions="-s --symptom $dashoptions";
            dashoptions='--tag';
            dashoptions="--tag";
                dashoptions="-u --update $dashoptions";
                dashoptions="-w --window $dashoptions";
                dashoptions="-w --window $dashoptions";
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1002/bus
    dc='*-d?(c)*';
        -d | --directory)
        -d | --directory | -p | --prefix)
    declare -F $1 &> /dev/null || { 
				(* | default)
DEFAULTS_PATH=/usr/share/gconf/ubuntu.default.path
dequote () 
				(describe)
_desktop_file_validate () 
DESKTOP_SESSION=ubuntu
                    detached=yes;
            $( [[ -d /etc/fs ]] && command ls /etc/fs )";
    [[ -d /etc/init.d ]] && sysvdirs+=(/etc/init.d);
    [[ -d /etc/rc.d/init.d ]] && sysvdirs+=(/etc/rc.d/init.d);
            [[ -d $i ]] && khd+=("$i"/*pub);
                *dir*)
        --*dir*)
        dirs+=("${BASH_SOURCE%/*}/completions");
        dirs+=(./completions);
        dirs+=($dir/bash-completion/completions);
DIRSTACK=()
        --disk-module)
DISPLAY=:0
    do
    do
    do
    do
    do
    do
    do
    do
    do
    do
    do
    do
    do
    do
    do
    do
    do
    do
        do
        do
        do
        do
        do
        do
        do
        do
        do
        do
        do
        do
        do
        do
        do
            do
            do
            do
            do
                do
                do
                    do
                        do
    done
    done
    done
    done
    done
    done
    done
    done
    done
        done
        done
         done
                    done
                        done;
                done;
                done;
                done;
                done;
            done;
            done;
            done;
            done;
            done;
            done;
            done;
        done;
        done;
        done;
        done;
        done;
        done;
        done;
        done;
        done;
        done;
        done;
        done;
        done;
        done;
        done;
        done;
        done;
        done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done;
    done 2> /dev/null < /etc/shells
    done <<< "$output";
        done <<< "$x";
        done <<< "$x";
    done <<< "$x";
_dvd_devices () 
            e='!*'
            e)
                    echo "bash: ${FUNCNAME[0]}:" "\`$1${2+ }$2': missing argument(s)" 1>&2;
                    echo "bash:" "${FUNCNAME[0]}: \`$1': invalid number specifier" 1>&2;
                echo "bash: ${FUNCNAME[0]}: $1: invalid option" 1>&2;
                    echo "bash: ${FUNCNAME[0]}: $1: missing" "argument(s)" 1>&2;
                    echo "bash: ${FUNCNAME[0]}: \`$1': missing" "number specifier" 1>&2;
                echo "bash: $FUNCNAME(): \`${!OPTIND}': unknown argument" 1>&2;
    echo "${boot_dir%/}/grub"
            echo "${COMP_WORDS[i]}";
        echo "${FUNCNAME[0]}: usage: ${FUNCNAME[0]} [-v varname" "value] | [-aN varname [value ...]] ..." 1>&2;
                echo "${i%=*}"
                echo ${i%%?(=*)]}
    echo $syms
            e='!*.+(doc|DOC|dot|DOT|rtf|RTF|sxw|SXW|stw|STW|sdw|SDW|vor|VOR|txt|TXT|htm?|HTM?|xml|XML|wp|WP|wpd|WPD|wps|WPS|odt|ODT|ott|OTT|fodt|FODT|docm|DOCM|docx|DOCX|dotm|DOTM|dotx|DOTX|sxg|SXG|odm|ODM|sgl|SGL)'
        [[ -e /etc/mandrake-release ]] && _xinetd_services;
            e='!*.+(htm|HTM|html|HTML|stw|STW|txt|TXT|vor|VOR|oth|OTH)'
        elif [[ ${1:-} == -a ]]; then
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
    else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
        else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
            else
                else
                else
                else
                else
                else
                else
                else
                else
                    else
                    else
                        else
                            else
            e='!*.+(odb|ODB)'
            e='!*.+(oxt|OXT)'
                errx=$OPTARG
    esac
    esac
    esac
    esac
    esac
        esac
        esac
            esac
            esac
            esac
            esac
            esac
                esac
                            esac;
                esac;
                esac;
            esac;
        esac;
        esac;
        esac;
        esac;
        esac;
        esac;
        esac;
        esac;
        esac;
        esac;
        esac;
        esac;
        esac;
        esac;
        esac;
        esac;
    esac;
    esac;
    esac;
    esac;
    esac;
    esac;
    esac;
    esac;
    esac;
    esac;
    esac;
    esac;
    esac;
				esac 2>/dev/null)" || b="$short_sha...";
            e='!*.+(stw|STW|dot|DOT|vor|VOR|stc|STC|xlt|XLT|sti|STI|pot|POT|std|STD|stw|STW|dotm|DOTM|dotx|DOTX|potm|POTM|potx|POTX|xltm|XLTM|xltx|XLTX)'
            e='!*.+(sxc|SXC|stc|STC|dif|DIF|dbf|DBF|xls|XLS|xlw|XLW|xlt|XLT|rtf|RTF|sdc|SDC|vor|VOR|slk|SLK|txt|TXT|htm|HTM|html|HTML|wk1|WK1|wks|WKS|123|123|xml|XML|ods|ODS|ots|OTS|fods|FODS|csv|CSV|xlsb|XLSB|xlsm|XLSM|xlsx|XLSX|xltm|XLTM|xltx|XLTX)'
            e='!*.+(sxd|SXD|std|STD|dxf|DXF|emf|EMF|eps|EPS|met|MET|pct|PCT|sgf|SGF|sgv|SGV|sda|SDA|sdd|SDD|vor|VOR|svm|SVM|wmf|WMF|bmp|BMP|gif|GIF|jpg|JPG|jpeg|JPEG|jfif|JFIF|fif|FIF|jpe|JPE|pcd|PCD|pcx|PCX|pgm|PGM|png|PNG|ppm|PPM|psd|PSD|ras|RAS|tga|TGA|tif|TIF|tiff|TIFF|xbm|XBM|xpm|XPM|odg|ODG|otg|OTG|fodg|FODG|odc|ODC|odi|ODI|sds|SDS|wpg|WPG|svg|SVG|vdx|VDX|vsd|VSD|vsdm|VSDM|vsdx|VSDX)'
            e='!*.+(sxd|SXD|std|STD|dxf|DXF|emf|EMF|eps|EPS|met|MET|pct|PCT|sgf|SGF|sgv|SGV|sda|SDA|sdd|SDD|vor|VOR|svm|SVM|wmf|WMF|bmp|BMP|gif|GIF|jpg|JPG|jpeg|JPEG|jfif|JFIF|fif|FIF|jpe|JPE|pcd|PCD|pcx|PCX|pgm|PGM|png|PNG|ppm|PPM|psd|PSD|ras|RAS|tga|TGA|tif|TIF|tiff|TIFF|xbm|XBM|xpm|XPM|odg|ODG|otg|OTG|fodg|FODG|odc|ODC|odi|ODI|sds|SDS|wpg|WPG|svg|SVG|vdx|VDX|vsd|VSD|vsdm|VSDM|vsdx|VSDX|doc|DOC|dot|DOT|rtf|RTF|sxw|SXW|stw|STW|sdw|SDW|vor|VOR|txt|TXT|htm?|HTM?|xml|XML|wp|WP|wpd|WPD|wps|WPS|odt|ODT|ott|OTT|fodt|FODT|docm|DOCM|docx|DOCX|dotm|DOTM|dotx|DOTX|sxm|SXM|smf|SMF|mml|MML|odf|ODF|sxi|SXI|sti|STI|ppt|PPT|pps|PPS|pot|POT|sxd|SXD|sda|SDA|sdd|SDD|sdp|SDP|vor|VOR|cgm|CGM|odp|ODP|otp|OTP|fodp|FODP|ppsm|PPSM|ppsx|PPSX|pptm|PPTM|pptx|PPTX|potm|POTM|potx|POTX|odb|ODB|sxc|SXC|stc|STC|dif|DIF|dbf|DBF|xls|XLS|xlw|XLW|xlt|XLT|rtf|RTF|sdc|SDC|vor|VOR|slk|SLK|txt|TXT|htm|HTM|html|HTML|wk1|WK1|wks|WKS|123|123|xml|XML|ods|ODS|ots|OTS|fods|FODS|csv|CSV|xlsb|XLSB|xlsm|XLSM|xlsx|XLSX|xltm|XLTM|xltx|XLTX|sxg|SXG|odm|ODM|sgl|SGL|stw|STW|dot|DOT|vor|VOR|stc|STC|xlt|XLT|sti|STI|pot|POT|std|STD|stw|STW|dotm|DOTM|dotx|DOTX|potm|POTM|potx|POTX|xltm|XLTM|xltx|XLTX|htm|HTM|html|HTML|stw|STW|txt|TXT|vor|VOR|oth|OTH)'
            e='!*.+(sxd|SXD|std|STD|dxf|DXF|emf|EMF|eps|EPS|met|MET|pct|PCT|sgf|SGF|sgv|SGV|sda|SDA|sdd|SDD|vor|VOR|svm|SVM|wmf|WMF|bmp|BMP|gif|GIF|jpg|JPG|jpeg|JPEG|jfif|JFIF|fif|FIF|jpe|JPE|pcd|PCD|pcx|PCX|pgm|PGM|png|PNG|ppm|PPM|psd|PSD|ras|RAS|tga|TGA|tif|TIF|tiff|TIFF|xbm|XBM|xpm|XPM|odg|ODG|otg|OTG|fodg|FODG|odc|ODC|odi|ODI|sds|SDS|wpg|WPG|svg|SVG|vdx|VDX|vsd|VSD|vsdm|VSDM|vsdx|VSDX|doc|DOC|dot|DOT|rtf|RTF|sxw|SXW|stw|STW|sdw|SDW|vor|VOR|txt|TXT|htm?|HTM?|xml|XML|wp|WP|wpd|WPD|wps|WPS|odt|ODT|ott|OTT|fodt|FODT|docm|DOCM|docx|DOCX|dotm|DOTM|dotx|DOTX|sxm|SXM|smf|SMF|mml|MML|odf|ODF|sxi|SXI|sti|STI|ppt|PPT|pps|PPS|pot|POT|sxd|SXD|sda|SDA|sdd|SDD|sdp|SDP|vor|VOR|cgm|CGM|odp|ODP|otp|OTP|fodp|FODP|ppsm|PPSM|ppsx|PPSX|pptm|PPTM|pptx|PPTX|potm|POTM|potx|POTX|odb|ODB|sxc|SXC|stc|STC|dif|DIF|dbf|DBF|xls|XLS|xlw|XLW|xlt|XLT|rtf|RTF|sdc|SDC|vor|VOR|slk|SLK|txt|TXT|htm|HTM|html|HTML|wk1|WK1|wks|WKS|123|123|xml|XML|ods|ODS|ots|OTS|fods|FODS|csv|CSV|xlsb|XLSB|xlsm|XLSM|xlsx|XLSX|xltm|XLTM|xltx|XLTX|sxg|SXG|odm|ODM|sgl|SGL|stw|STW|dot|DOT|vor|VOR|stc|STC|xlt|XLT|sti|STI|pot|POT|std|STD|stw|STW|dotm|DOTM|dotx|DOTX|potm|POTM|potx|POTX|xltm|XLTM|xltx|XLTX|htm|HTM|html|HTML|stw|STW|txt|TXT|vor|VOR|oth|OTH)'
            e='!*.+(sxi|SXI|sti|STI|ppt|PPT|pps|PPS|pot|POT|sxd|SXD|sda|SDA|sdd|SDD|sdp|SDP|vor|VOR|cgm|CGM|odp|ODP|otp|OTP|fodp|FODP|ppsm|PPSM|ppsx|PPSX|pptm|PPTM|pptx|PPTX|potm|POTM|potx|POTX)'
            e='!*.+(sxm|SXM|smf|SMF|mml|MML|odf|ODF)'
EUID=1002
    [[ $EUID -eq 0 || -n ${root_command:-} ]]
            eval $1=\"\$2\";
            eval $1=\(\"\${@:2}\"\);
        eval $1=$(printf ~%q "${!1#\~}");
        eval compgen -f -X "'!$xspec'" -- "\$(quote_readline "\$cur")" | {
            eval COMPREPLY=\(${c}\)
            eval COMPREPLY=\(${c}\)
            eval COMPREPLY=\(${c}\)
    eval local cmd=$( quote "$1" );
    eval local cmd=$( quote "$1" );
    eval printf %s "$1" 2> /dev/null
    eval xspec="${xspec}";
                exclude+==
        exclude="${1//[^$COMP_WORDBREAKS]}";
                exclude=$OPTARG
                exclude+=$OPTARG
_expand () 
    _expand || return;
__expand_tilde_by_ref () 
        __expand_tilde_by_ref cur;
        __expand_tilde_by_ref i;
                __expand_tilde_by_ref j;
                __expand_tilde_by_ref j;
            F)
            [[ -f "$compfile" ]] && . "$compfile" &> /dev/null && return 0;
    [[ -f /etc/slackware-version ]] && sysvdirs=(/etc/rc.d)
        -f | --file-bug)
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
    fi
        fi
        fi
            fi
            fi
            fi
                fi
                                fi;
                            fi;
                        fi;
                        fi;
                    fi;
                    fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
                fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
            fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
        fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
    fi;
                        _filedir;
                    _filedir;
            _filedir;
            _filedir;
        _filedir;
        _filedir;
        _filedir;
        _filedir;
        _filedir;
        _filedir;
        _filedir;
        _filedir;
        _filedir;
    _filedir
_filedir () 
            _filedir conf;
                    _filedir -d;
            _filedir -d;
            _filedir -d;
            _filedir -d;
            _filedir -d;
            _filedir -d;
            _filedir -d;
            _filedir -d;
        _filedir -d;
    _filedir -d;
    _filedir '@(desktop)'
            _filedir "$manext";
        _filedir "$manext";
        _filedir "$manext";
        _filedir $xspec;
_filedir_xspec () 
                *file* | *path*)
        --*file* | --*path*)
    for ((c=1; c <= ${#COMP_WORDS[@]}; c++ ))
            for commit in $commits;
        for compfile in "$cmd" "$cmd.bash" "_$cmd";
    for dir in "${dirs[@]}";
    for dir in ${XDG_DATA_DIRS:-/usr/local/share:/usr/share};
        for FILE in $(ls /usr/share/apport/symptoms);
        for f in ${i};
    for ((i=0; i <= COMP_CWORD - $word_offset; i++ ))
        for ((i=0; i < ${#COMPREPLY[@]}; i++ ))
            for ((i = 0; i <= cword; ++i ))
        for ((i = 0; i <= cword; ++i ))
    for ((i=0; i < $word_offset; i++ ))
        for ((i=0, j=0; i < ${#COMP_WORDS[@]}; i++, j++))
    for ((i=1; i <= COMP_CWORD; i++ ))
    for ((i=1; i < COMP_CWORD; i++ ))
            for (i=1; i<=NF; ++i) { \
                    for ((i=1; i < ${#option}; i++ ))
    for ((i=1; i < ${#words[@]}; 1))
    for ((i=$COMP_CWORD-1; i > 0; i-- ))
    for ((i; i <= COMP_CWORD; i++ ))
    for i in "${array[@]}";
    for i in ${CDPATH//:/'
                        for i in ${!COMPREPLY[@]};
        for i in ${!COMPREPLY[@]};
        for i in ${!COMP_WORDS[@]};
    for i in "${config[@]}";
        for i in /etc/ssh2/knownhosts ~/.ssh2/hostkeys;
        for i in /etc/ssh/ssh_config ~/.ssh/config ~/.ssh2/config;
        for i in /etc/ssh/ssh_known_hosts /etc/ssh/ssh_known_hosts2 /etc/known_hosts /etc/known_hosts2 ~/.ssh/known_hosts ~/.ssh/known_hosts2;
    for i in ${included[@]};
            for i in "${khd[@]}";
    for i in $(LC_ALL=C $prog --help);
    for i in $(LC_ALL=C $prog --usage);
        for i in "${tmpkh[@]}";
    for i in "${words[@]:1:cword-1}";
        for ((i=$start; i < ${#COMPREPLY[@]}; i++ ))
        for ((j=0; j <= ${#COMP_LINE}; j++ ))
        for j in $( compgen -d -- $i/$cur );
            for j in $i;
                for ((n=1; n <= n_stop; n++))
    for option in ${GIT_PS1_SHOWUPSTREAM};
                for s in $(compgen -f -X "$e" -- $c);
        fss="$( awk '/^[ \t]*[^#]/ { print $3 }' /etc/fstab 2>/dev/null )
        fss="$( cut -d'	' -f2 /proc/filesystems )
_fstypes () 
                    $func $cmd "${COMP_WORDS[${#COMP_WORDS[@]}-1]}";
                    $func $cmd "${COMP_WORDS[${#COMP_WORDS[@]}-1]}" "${COMP_WORDS[${#COMP_WORDS[@]}-2]}";
                func=${func%% *};
GDMSESSION=ubuntu
    [[ $# -ge $OPTIND ]] && echo "error: $FUNCNAME("$@"): unprocessed arguments:" $(while [[ $# -ge $OPTIND ]]; do printf '%s\n' ${!OPTIND}; shift; done);
_get_comp_words_by_ref () 
    _get_comp_words_by_ref cur;
    _get_comp_words_by_ref -n "$exclude<>&" cur prev words cword;
_get_cword () 
        _get_cword "${@:-}" 1;
__get_cword_at_cursor_by_ref () 
    __get_cword_at_cursor_by_ref "$exclude" words cword cur;
_get_first_arg () 
_get_pword () 
_gids () 
        git)
					git describe --contains --all HEAD ;;
					git describe --contains HEAD ;;
					git describe HEAD ;;
					git describe --tags --exact-match HEAD ;;
					git describe --tags HEAD ;;
                git diff --no-ext-diff --cached --quiet || i="+";
                git diff --no-ext-diff --quiet || w="*";
__git_eread () 
                __git_eread "$g/rebase-apply/head-name" b;
            __git_eread "$g/rebase-apply/last" total;
            __git_eread "$g/rebase-apply/next" step;
        __git_eread "$g/rebase-merge/end" total;
        __git_eread "$g/rebase-merge/head-name" b;
        __git_eread "$g/rebase-merge/msgnum" step;
__git_printf_supports_v=yes
__git_ps1 () 
        __git_ps1_branch_name=$b;
        __git_ps1_colorize_gitstring;
__git_ps1_colorize_gitstring () 
                __git_ps1_show_upstream;
__git_ps1_show_upstream () 
                GIT_PS1_SHOWUPSTREAM="$value";
            __git_ps1_upstream_name=$(git rev-parse 				--abbrev-ref "$upstream" 2>/dev/null);
            gitstring=$(printf -- "$printf_format" "$gitstring");
            git | svn)
GJS_DEBUG_OUTPUT=stderr
GJS_DEBUG_TOPICS='JS ERROR;JS LOG'
GNOME_DESKTOP_SESSION_ID=this-is-deprecated
GNOME_SHELL_SESSION_MODE=ubuntu
GNOME_TERMINAL_SCREEN=/org/gnome/Terminal/screen/ffacb0fa_4da4_44e1_b03e_717be66c2d2b
GNOME_TERMINAL_SERVICE=:1.69
GPG_AGENT_INFO=/run/user/1002/gnupg/S.gpg-agent:0:1
                greadlink -f "$(type -P "$1")";
GROUPS=()
__grubcomp () 
            __grubcomp "biosdisk ata";
        __grubcomp "$(__grub_get_options_from_help)";
        __grubcomp "$(__grub_get_options_from_help)";
        __grubcomp "$(__grub_get_options_from_help)";
        __grubcomp "$(__grub_get_options_from_help)";
        __grubcomp "$(__grub_get_options_from_help)";
        __grubcomp "$(__grub_get_options_from_help)";
        __grubcomp "$(__grub_get_options_from_help)";
        __grubcomp "$(__grub_get_options_from_help)";
        __grubcomp "$(__grub_get_options_from_help)";
        __grubcomp "$(__grub_get_options_from_help)";
    __grubcomp "$(__grub_get_options_from_help)
            __grubcomp "$(LC_ALL=C $prog --help |                         awk -F ":" '/available formats/ { print $2 }' |                         sed 's/, / /g')";
            __grubcomp "$(LC_ALL=C $prog --help |                         awk -F "[()]" '/--target=/ { print $2 }' |                         sed 's/|/ /g')";
__grub_dir () 
_grub_editenv () 
__grub_get_last_option () 
__grub_get_options_from_help () 
__grub_get_options_from_usage () 
_grub_install () 
        __grub_list_menuentries;
__grub_list_menuentries () 
                __grub_list_modules;
                __grub_list_modules;
__grub_list_modules () 
_grub_mkconfig () 
_grub_mkfont () 
_grub_mkimage () 
_grub_mkpasswd_pbkdf2 () 
_grub_mkrescue () 
_grub_probe () 
_grub_script_check () 
__grub_script_check_program=grub-script-check
_grub_set_entry () 
_grub_setup () 
GTK2_MODULES=overlay-scrollbar
GTK_IM_MODULE=ibus
GTK_MODULES=gail:atk-bridge
_have () 
        --help | --usage | --version)
        -h | --help | -v | --version | --tag)
        -h | --help | -v | --version | --tag)
HISTCONTROL=ignoreboth
HISTFILE=/home/fywest/.bash_history
HISTFILESIZE=2000
HISTSIZE=1000
HOME=/home/fywest
                    host=${host/%.pub/};
                    host=${i/#*key_22_/};
HOSTNAME=x1-VirtualBox
HOSTTYPE=x86_64
                    i="#";
            i)
            i)
        [[ "$i" != -* ]] && args=$(($args+1));
                i=${BASH_REMATCH[1]}${BASH_REMATCH[3]};
                [[ $i == $COMP_CWORD ]] && printf -v "$3" %s "$j";
            [[ $i == $COMP_CWORD ]] && printf -v "$3" %s "$j";
        [[ $i == $COMP_CWORD ]] && printf -v "$3" %s "$j";
        i=${COMPREPLY[0]};
                (( $i < ${#COMP_WORDS[@]} - 1)) && ((i++)) || break 2;
                i="${COMP_WORDS[c]}";
        i="${COMP_WORDS[c]}";
                i="/etc/ssh/$i";
            if [[ 0 -ne ${#svn_upstream[@]} ]]; then
    if [[ $1 == \~* && $1 != */* ]]; then
    if [[ "$1" == *:* && "$COMP_WORDBREAKS" == *:* ]]; then
    if [[ "$1" != -d ]]; then
        if [[ "$1" == @(rmdir|chroot) ]]; then
    if [[ "$1" == -s ]]; then
            if [[ $1 == \~* ]]; then
        if [[ $1 == \'* ]]; then
    if [[ ${!1} == \~* ]]; then
                if [[ $1 == -u ]]; then
                if [[ $1 == -u ]]; then
            if [[ $1 == -u ]]; then
        if [[ ${1:-} == -w ]]; then
        if (( $# == 2 )); then
            if [[ "$awkcur" == [0-9]* ]]; then
        if [[ "$awkcur" == [0-9]*[.:]* ]]; then
            if [[ ${BASH_REMATCH[3]} == [@*] ]]; then
    if [[ $BASH_SOURCE == */* ]]; then
        if commits="$(git rev-list --left-right "$upstream"...HEAD 2>/dev/null)"; then
    if [[ $COMP_CWORD -eq 0 ]]; then
    if [[ $COMP_CWORD -ge 1 ]]; then
    if _complete_as_root; then
    if _complete_as_root; then
            if [[ ${#COMPREPLY[@]} -eq 0 ]]; then
    if [[ ${#COMPREPLY[@]} -eq 1 ]]; then
                            if [[ ${COMPREPLY[i]} == *.tab ]]; then
            if ! [[ "${COMP_WORDS[*]}" =~ .*--crash-file.* || "${COMP_WORDS[*]}" =~ .*\ -c\ .* ]]; then
            if ! [[ "${COMP_WORDS[*]}" =~ .*--file-bug.* || "${COMP_WORDS[*]}" =~ .*\ -f\ .* ]]; then
                if [[ ${#COMP_WORDS[@]} -ge 2 ]]; then
        if [[ "${COMP_WORDS[i]}" == -* ]]; then
        if [[ "${COMP_WORDS[i]}" != -* ]]; then
        if [[ "${COMP_WORDS[i]}" != -* ]]; then
            if [[ "${COMP_WORDS[*]}" =~ .*\ -p.* || "${COMP_WORDS[*]}" =~ .*--package.* ]]; then
            if ! [[ "${COMP_WORDS[*]}" =~ .*--save.* ]]; then
            if ! [[ "${COMP_WORDS[*]}" =~ .*--save.* ]]; then
            if ! [[ "${COMP_WORDS[*]}" =~ .*--symptom.* || "${COMP_WORDS[*]}" =~ .*\ -s\ .* ]]; then
            if ! [[ "${COMP_WORDS[*]}" =~ .*--update.* || "${COMP_WORDS[*]}" =~ .*\ -u\ .* ]]; then
            if ! [[ "${COMP_WORDS[*]}" =~ .*--window.* || "${COMP_WORDS[*]}" =~ .*\ -w\ .* ]]; then
            if ! [[ "${COMP_WORDS[*]}" =~ .*--window.* || "${COMP_WORDS[*]}" =~ .*\ -w\ .* ]]; then
            ifconfig -a || ip link show
            if [[ "$configfile" =~ ^\/etc\/ssh.* ]]; then
    if [[ ${#config[@]} -gt 0 && -n "$aliases" ]]; then
    if [[ ${#config[@]} -gt 0 ]]; then
            ifconfig || ip link show up
            if [[ ${cspec#* -F } != $cspec ]]; then
            if [[ $cur =~ ^\$\{[#!]?[A-Za-z0-9_]*\[.*\]$ ]]; then
        if [[ $cur =~ ^(\$\{[#!]?)([A-Za-z0-9_]*)\[([^]]*)$ ]]; then
    if [[ $cur =~ ^(\$(\{[!#]?)?)([A-Za-z0-9_]*)$ ]]; then
    if [[ $cur == *\\\\* || $cur == *:*:* ]]; then
    if [[ $cur == $redir* || $prev == $redir ]]; then
            if [[ $cur == *:* ]]; then
        if [[ "$cur" == \~* ]]; then
        if [[ $cur == *\\:* ]]; then
        if [[ $cur == \${* ]]; then
    if [[ "$cur" == --?*=* ]]; then
    if [[ "$cur" == -* ]]; then
    if [[ "$cur" == -* ]]; then
    if [[ "$cur" == -* ]]; then
    if [[ "$cur" == -* ]]; then
    if [[ "$cur" == -* ]]; then
    if [[ "$cur" == -* ]]; then
    if [[ "$cur" == -* ]]; then
    if [[ "$cur" == -* ]]; then
    if [[ "$cur" == -* ]]; then
    if [[ "$cur" == -* ]]; then
    if [[ "$cur" == -* ]]; then
    if [[ "$cur" == @(*/|[.~])* ]]; then
    if [[ "$cur" == \~*/* ]]; then
    if [[ $cur == -* ]]; then
    if [[ $cur == *@* ]]; then
    if [[ $cword -eq 1 && $prev == ?(*/)service ]]; then
                                if [[ -d ${COMPREPLY[i]} ]]; then
    if [ $detached = no ]; then
        if [ -d "$g/rebase-apply" ]; then
    if [ -d "$g/rebase-merge" ]; then
    if [[ -d $xinetddir ]]; then
    if [[ -e /proc/filesystems ]]; then
    if [ -f "$config_file" ]; then
    if [[ -f /etc/debian_version ]]; then
            if [[ -f /etc/pld-release ]]; then
        if [[ -f /etc/SuSE-release ]]; then
                        if [ -f "$g/BISECT_LOG" ]; then
                if [ -f "$g/CHERRY_PICK_HEAD" ]; then
            if [ -f "$g/MERGE_HEAD" ]; then
                if [ -f "$g/rebase-apply/applying" ]; then
            if [ -f "$g/rebase-apply/rebasing" ]; then
        if [ -f "$g/rebase-merge/interactive" ]; then
                    if [ -f "$g/REVERT_HEAD" ]; then
            if [[ ! "$FILE" =~ ^_.* && -n $(egrep "^def run\s*\(.*\):" /usr/share/apport/symptoms/$FILE) ]]; then
    if [ $# -ge 1 ]; then
    if [ $# -ge 1 ]; then
                if ! __git_eread "$g/HEAD" head; then
        if [ "${__git_printf_supports_v-}" != yes ]; then
    if [ $# -gt 2 ]; then
                if [ "$head" = "$b" ]; then
            if [ -h "$g/HEAD" ]; then
        if [[ "$i" == "$cur" && $i != "*/" ]]; then
            if ($i !~ /[*?]/ && $i ~ /'"$awkcur"'/) {print $i} \
                if [[ "$i" == *key_22_$curd*.pub && -r "$i" ]]; then
                if [[ "$i" -lt "$cword" ]]; then
            if [[ $i -lt $cword ]]; then
    if [[ $index -gt 0 && ( -n $lead && -n ${lead//[[:space:]]} ) ]]; then
        if ! [[ "$i" =~ ^\~.*|^\/.* ]]; then
        if [[ ${#khd[@]} -gt 0 ]]; then
    if [[ ${#kh[@]} -gt 0 || ${#khd[@]} -gt 0 ]]; then
        if [[ ${#kh[@]} -gt 0 ]]; then
    if [[ -n $1 ]]; then
    if [[ -n ${2//[^0-9]/} ]]; then
        if [ -n "$b" ]; then
    if [[ -n ${COMP_KNOWN_HOSTS_WITH_HOSTFILE-1} ]]; then
    if [[ -n $configfile ]]; then
        if [[ -n "$count" && -n "$name" ]]; then
        if [[ ! -n $cspec && $cmd == */* ]]; then
        if [[ -n $cspec ]]; then
        if [[ ! -n $cspec ]]; then
    if [[ -n $cur ]]; then
    if [[ -n $exclude ]]; then
            if [ -n "${GIT_PS1_SHOWDIRTYSTATE-}" ] && [ "$(git config --bool bash.showDirtyState)" != "false" ]; then
            if [ -n "${GIT_PS1_SHOWSTASHSTATE-}" ] && git rev-parse --verify --quiet refs/stash > /dev/null; then
            if [ -n "${GIT_PS1_SHOWUNTRACKEDFILES-}" ] && [ "$(git config --bool bash.showUntrackedFiles)" != "false" ] && git ls-files --others --exclude-standard --directory --no-empty-directory --error-unmatch -- ':/*' > /dev/null 2> /dev/null; then
            if [ -n "${GIT_PS1_SHOWUPSTREAM-}" ]; then
    if [[ -n $ipv4 || -n $ipv6 ]]; then
    if [[ -n $ipv4 ]]; then
    if [[ -n $ipv6 ]]; then
    if [ -n "$i" ]; then
            if [[ ( -n $mark_symdirs && -h $j || -n $mark_dirs && ! -h $j ) && ! -d ${j#$i/} ]]; then
    if [ -n "$step" ] && [ -n "$total" ]; then
    if [ -n "$s" ]; then
    if [ -n "$u" ]; then
    if [[ -n ${ZSH_VERSION-} ]]; then
    if [[ $option =~ (\[((no|dont)-?)\]). ]]; then
    if [ $pcmode = yes ] && [ -n "${GIT_PS1_SHOWCOLORHINTS-}" ]; then
            if [ $pcmode = yes ] && [ $ps1_expanded = yes ]; then
    if [ $pcmode = yes ] && [ $ps1_expanded = yes ]; then
    if [ $pcmode = yes ]; then
    if [[ "$prev" != $mansect ]]; then
    if [ "$rev_parse_exit_code" = "0" ]; then
            if [ -r $f ]; then
    if [ -r /usr/share/apport/symptoms ]; then
    IFS='
    IFS=' 	
        IFS=$OIFS;
    IFS=$OIFS;
IFS=$' \t\n'
                if [[ "svn+git" = "$upstream" ]]; then
            if test "$c" = ".."; then
                    if test -d $s; then
            if test $g -eq 0; then
                        if test -z "$t"; then
    if ! (( $# )); then
    if [[ ${#toks[@]} -ne 0 ]]; then
    if [[ ${#toks[@]} -ne 0 ]]; then
        if [ "true" = "$bare_repo" ]; then
    if [ "true" = "$inside_gitdir" ]; then
    if [ "true" = "$inside_worktree" ] && [ -n "${GIT_PS1_HIDE_IF_PWD_IGNORED-}" ] && [ "$(git config --bool bash.hideIfPwdIgnored)" != "false" ] && git check-ignore -q .; then
        if [ "true" = "$inside_worktree" ]; then
    if type getent &> /dev/null; then
    if type getent &> /dev/null; then
        if type perl &> /dev/null; then
        if type perl &> /dev/null; then
            if type -p greadlink > /dev/null; then
                if type -p readlink > /dev/null; then
        if type -p realpath > /dev/null; then
    if unset -v "$1"; then
            if [[ ${#vars[@]} -eq 1 && -n $arrs ]]; then
            if [[ "${words[cword]:0:${#cur}}" != "$cur" ]]; then
        if [[ "${#words[cword]}" -eq 0 || "$COMP_POINT" == "${#COMP_LINE}" ]]; then
        if [[ ${words[i]} == $redir* ]]; then
    if [ "$w" = "*" ]; then
    if [[ -x /sbin/upstart-udev-bridge ]]; then
    if [[ $xspec == !* ]]; then
    if [ -x /usr/lib/command-not-found ]; then
        if [ -x /usr/share/command-not-found/command-not-found ]; then
    if [ -z "$1" ]; then
                if [[ -z $awkcur ]]; then
    if [[ -z "${CDPATH:-}" || "$cur" == ?(.)?(.)/* ]]; then
    if [[ -z $configfile ]]; then
                if [[ -z "${GIT_PS1_SHOWUPSTREAM}" ]]; then
    if [[ -z "$legacy" ]]; then
    if [ -z "$repo_info" ]; then
                if [ -z "$short_sha" ] && [ -z "$i" ]; then
                if [[ -z "$svn_upstream" ]]; then
    if [[ -z "$verbose" ]]; then
                i="$HOME/.ssh/$i";
                i=${i#[};
            i=$(( ++i ));
' i j k;
            [[ $i -le $cword ]] && cword=$(( cword - skip ));
IM_CONFIG_PHASE=2
_included_ssh_config_files () 
                _included_ssh_config_files $f;
        _included_ssh_config_files "$i";
                    [[ $index -gt 0 ]] && ((index--));
                [[ $index -gt 0 ]] && ((index--));
                    index=$(( index - old_size + new_size ));
                index=$(( index - old_size + new_size ));
        [[ $index -lt 0 ]] && index=0;
_init_completion () 
    _init_completion -n : || return;
    _init_completion -n : || return;
    _init_completion || return;
    _init_completion || return;
    _init_completion || return;
    _init_completion -s -n : || return;
    _init_completion -s || return;
    _init_completion -s || return;
_installed_modules () 
                inx=$OPTARG
        i="$ok_color$i";
_ip_addresses () 
                ipv4=1
                ipv6=1
            iwconfig
                j+="/";
' j;
                j=${BASH_REMATCH[2]};
        k="${#COMPREPLY[@]}";
_kernel_versions () 
    kh=();
            }}' "${kh[@]}" 2>/dev/null ));
_known_hosts () 
_known_hosts_real () 
        _known_hosts_real "$cur";
    _known_hosts_real $options -- "$cur"
LANG=en_US.UTF-8
    last=$(__grub_get_last_option);
    last=$(__grub_get_last_option);
LC_ADDRESS=en_US.UTF-8
                LC_ALL=C "$( dequote "$cmd" )" ${2:---help} 2>&1
                LC_ALL=C "$( dequote "$cmd" )" ${2:---usage} 2>&1
LC_IDENTIFICATION=en_US.UTF-8
LC_MEASUREMENT=en_US.UTF-8
LC_MONETARY=en_US.UTF-8
LC_NAME=en_US.UTF-8
LC_NUMERIC=en_US.UTF-8
LC_PAPER=en_US.UTF-8
LC_TELEPHONE=en_US.UTF-8
LC_TIME=en_US.UTF-8
            legacy)
                legacy=1
LESSCLOSE='/usr/bin/lesspipe %s %s'
LESSOPEN='| /usr/bin/lesspipe %s'
        let "OPTIND += 1";
    let "OPTIND += 1";
        libreoffice)
        [[ $line == *([[:blank:]])-* ]] || continue;
                [[ $line == [[:blank:]]* ]] && ((j++));
                [[ $line != [[:blank:]]* ]] && (( j >= 2 )) && ((j--));
        line=$COMP_LINE;
            line=${line/"${BASH_REMATCH[0]}"/"${BASH_REMATCH[1]}"};
                line=${line#*"${COMP_WORDS[$i]}"};
            line=${line#*"${COMP_WORDS[i]}"};
            line=${line#*"$match"};
LINES=39
        -L | --locale | -m | --systems | -e | --extension | -r | --prompt | -R | --recode | -E | --encoding)
        -l | --local-file)
__load_completion () 
    __load_completion "$cmd" && return 124;
        __load_completion "$srcfile"
        lobase)
    local "$2" "$3" "$4" && _upvars -a${#words[@]} $2 "${words[@]}" -v $3 "$cword" -v $4 "${cur:0:$index}"
    local -a array;
    local a="${COMP_LINE}";
    local -a dirs=(${BASH_COMPLETION_USER_DIR:-${XDG_DATA_HOME:-$HOME/.local/share}/bash-completion}/completions);
    local -a kh khd config;
            local argtype=$( LC_ALL=C $1 --help 2>&1 | command sed -ne                 "s|.*$prev\[\{0,1\}=[<[]\{0,1\}\([-A-Za-z0-9_]\{1,\}\).*|\1|p" );
            local arrs vars;
    local -a sigs=($( compgen -P "$1" -A signal "SIG${cur#$1}" ));
        local -a svcs=($( printf '%s\n' $xinetddir/!($_backup_glob) ));
            local -a svn_upstream;
        local -a tmpkh;
    local -a toks;
    local -a toks;
    local b="";
    local bad_color=$c_red;
    local bare_repo="${repo_info##*
    local branch_color="";
        localc)
    local c="";
        local c_clear='\[\e[0m\]';
        local c_clear='%f';
    local c=${COMP_WORDS[COMP_CWORD]};
        local c_green='\[\e[32m\]';
        local c_green='%F{green}';
        local c_lblue='\[\e[1;34m\]';
        local c_lblue='%F{blue}';
    local cmd="${1:-_EmptycmD_}";
        local cmd=${COMP_WORDS[0]} compcmd=${COMP_WORDS[0]};
        local colon_word=${1%"${1##*:}"};
            local commit behind=0 ahead=0;
        local commits;
    local comprsuffix=".@([glx]z|bz2|lzma|Z)";
    local configfile flag prefix;
    local config_file=$(__grub_dir)/grub.cfg;
    local configfile i f;
        local c_red='\[\e[31m\]';
        local c_red='%F{red}';
        local cspec=$( complete -p $cmd 2>/dev/null );
    local cur;
    local cur;
    local cur;
    local cur;
            local cur="$COMP_LINE";
    local cur="${COMP_WORDS[COMP_CWORD]}";
    local cur="${COMP_WORDS[COMP_CWORD]}";
    local cur curd awkcur user suffix aliases i host ipv4 ipv6;
    local cur cword words=();
    local cur dashoptions prev param;
    local cur dashoptions prev param;
    local cur prev;
    local cur prev;
    local cur prev;
    local cur prev;
    local cur prev last;
    local cur prev last split=false;
    local cur prev split=false;
    local cur prev split=false;
    local cur prev split=false;
    local cur prev split=false;
    local cur prev words cword;
    local cur prev words cword;
    local cur prev words cword;
    local cur prev words cword;
    local cur prev words cword;
    local cur prev words cword split;
    local cur prev words cword split;
    local cur prev words cword split;
    local cword words=();
    local cword words;
    local detached=no;
    local e s g=0 cd dc t="";
    local exclude flag i OPTIND=1;
    local exclude= flag outx errx inx OPTIND=1;
    local exclude i j line ref;
    local exit=$?;
    local flags_color="$c_lblue";
    local fss;
                local func=${cspec#*-F };
    local f="$w$i$s$u";
    local gitstring="$c$b${f:+$z$f}$r$p";
    local g="${repo_info%
    local grub_dir=$(__grub_dir);
                local head="";
        local hosts=$( command sed -ne 's/^[[:blank:]]*[Hh][Oo][Ss][Tt][[:blank:]]\{1,\}\([^#*?%]*\)\(#.*\)\{0,1\}$/\1/p' "${config[@]}" );
            local i;
    local i="";
    local i;
    local i;
    local i c=1 boot_dir;
        local i=${#COMPREPLY[*]};
    local i cur index=$COMP_POINT lead=${COMP_LINE:0:$COMP_POINT};
    local i cword words;
                    local IFS='
                    local IFS='
                local IFS='
            local IFS='
            local IFS=' ''	''
        local IFS='
        local IFS='
        local IFS='
        local IFS='
        local IFS='
        local IFS='
        local IFS=' 	
    local IFS='
    local IFS='
    local IFS='
    local IFS='
    local IFS=' 	
    local IFS;
    local i IFS=" "'	''
    local i IFS=" "'	''
    local included=$( command sed -ne 's/^[[:blank:]]*[Ii][Nn][Cc][Ll][Uu][Dd][Ee][[:blank:]]\{1,\}\([^#%]*\)\(#.*\)\{0,1\}$/\1/p' "${configfile}" );
            local index="$COMP_POINT";
    local inside_gitdir="${repo_info##*
    local inside_worktree="${repo_info##*
    local i skip;
        local i start=${#COMPREPLY[@]};
    local key value;
    local LC_CTYPE=C;
    local line;
    local line match option i char;
    local manext="@([0-9lnp]|[0-9][px]|man|3?(gl|pm))?($comprsuffix)";
    local manpath=$( manpath 2>/dev/null || command man -w 2>/dev/null );
    local mansect="@([0-9lnp]|[0-9][px]|3?(gl|pm))";
    local matchop=!;
    local modpath;
                local mycur="${cur#*:}";
            local mycur="${cur#*[:]}";
                    local new_size="${#cur}";
                local new_size=${#cur};
    local n=$( getconf $var 2>/dev/null );
                local n_stop="${#svn_remote[@]}";
    local offset i;
        local OIFS=$IFS IFS='
    local OIFS=$IFS IFS=: dir cmd="${1##*/}" compfile;
    local ok_color=$c_green;
                    local old_size="${#cur}";
                local old_size=${#cur};
                local opt;
    local OPTIND=1;
    local option option2 i IFS=' 	
    local options;
    local output="$(git config -z --get-regexp '^(svn-remote\..*\.url|bash\.showupstream)$' 2>/dev/null | tr '\0\n' '\n ')";
    local p="";
    local param;
    local PATH=$PATH:/sbin;
    local PATH=$PATH:/sbin;
    local PATH="$PATH:/sbin:/usr/sbin";
    local PATH=$PATH:/sbin:/usr/sbin:/usr/local/sbin;
    local pcmode=no;
            local prefix;
    local printf_format=' (%s)';
    local prog;
    local prog;
            local prog=${COMP_WORDS[0]};
            local prog=${COMP_WORDS[0]};
    local ps1_expanded=yes;
    local ps1pc_end='\$ ';
    local ps1pc_start='\u@\h:\w ';
        local quoted;
    local quoted;
    local quoted=${1//\'/\'\\\'\'};
    local r="";
    local re='\([A-Fa-f0-9]\{2\}:\)\{5\}[A-Fa-f0-9]\{2\}';
    local redir="@(?([0-9])<|?([0-9&])>?(>)|>&)";
    local repo_info rev_parse_exit_code;
    local result=0;
    local -r mark_dirs=$(_rl_enabled mark-directories && echo y);
    local -r mark_symdirs=$(_rl_enabled mark-symlinked-directories && echo y);
    local root_command=$1;
    local s="";
    local sect;
    local shell rest;
    local short_sha="";
    local srcfile=$1;
    local step="";
    local svn_remote svn_url_pattern count n;
    local syms;
        local sysvdirs;
    local sysvdirs;
    local total="";
    local u="";
    local upargs=() upvars=() vcur vcword vprev vwords;
    local upstream=git legacy="" verbose="" name="";
    local userland=$( uname -s );
    local var=NPROCESSORS_ONLN;
    local w="";
    local word_offset=$1 i j;
    local xinetddir=/etc/xinetd.d;
        local xspec;
        local xspec=${1:+"!*.@($1|${1^^})"};
    local x tmp;
    local z="${GIT_PS1_STATESEPARATOR-" "}";
        lodraw)
_loexp_ () 
        loffice)
        lofromtemplate)
LOGNAME=fywest
        loimpress)
        lomath)
_longopt () 
        loweb)
        lowriter)
LS_COLORS='rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'
    [[ $# -lt 1 ]] && echo "error: $FUNCNAME: missing mandatory argument CONFIG";
    [[ $# -lt $OPTIND ]] && echo "error: $FUNCNAME: missing mandatory argument CWORD";
__ltrim_colon_completions () 
                __ltrim_colon_completions "$cur";
            __ltrim_colon_completions "$cur";
    __ltrim_colon_completions "$cur"
    __ltrim_colon_completions "$cur"
    __ltrim_colon_completions "$prefix$user$cur"
_mac_addresses () 
MACHTYPE=x86_64-pc-linux-gnu
MAILCHECK=60
_man () 
MANDATORY_PATH=/usr/share/gconf/ubuntu.mandatory.path
    manpath=$manpath:;
        manpath="${manpath//://*man$sect/$cur* } ${manpath//://*cat$sect/$cur* }";
        manpath="${manpath//://*man$sect/ } ${manpath//://*cat$sect/ }";
            match=${BASH_REMATCH[0]};
        matchop=@;
                _minimal;
_minimal () 
        -M | --manpath)
    modpath=/lib/modules/$1;
            --modules)
            --modules)
_modules () 
            n)
            n)
                [[ -n ${1#-a} ]] || { 
                [[ -n "$2" ]] && unset -v "$2" && eval $2=\(\"\${@:3:${1#-a}}\"\) && shift $((${1#-a} + 2)) || { 
                [[ -n "$2" ]] && unset -v "$2" && eval $2=\"\$3\" && shift 3 || { 
            name)
                name=1
        [[ -n ${COMP_FILEDIR_FALLBACK:-} && -n "$1" && ${#toks[@]} -lt 1 ]] && x=$( compgen -f -- $quoted ) && while read -r tmp; do
            [[ -n ${COMPREPLY[i]} ]] || unset -v COMPREPLY[i];
_ncpus () 
            [[ -n $cspec ]] && compcmd=${cmd##*/};
        [[ -n $cur && ! -n ${cur//[[:space:]]} ]] && cur=;
            -ne "s/^.*\(U\|msg_u\)sage.*{\(.*\)}.*$/\2/p" \
    [[ -n $fss ]] && COMPREPLY+=($( compgen -W "$fss" -- "$cur" ))
                [[ -n $option ]] || option=$i
    [[ -n $option ]] || return;
    [[ -n ${split-} ]] && _split_longopt && split=true;
             [ -n $tmp ] && {
            [[ -n $tmp ]] && printf '%s\n' $tmp
    [[ -n $vcur ]] && { 
    [[ -n $vcword ]] && { 
    [[ -n $vprev && $cword -ge 1 ]] && { 
    [[ -n $vwords ]] && { 
    [[ -n "${_xspecs[$cmd]}" ]] && complete -F _filedir_xspec "$cmd" && return 0;
            o)
    offset=1;
            offset=$i;
        -O | --format)
OLDPWD=/home/fywest
                    opt=${cspec%% *};
OPTERR=1
OPTIND=1
    option=;
        option2=${option2%%[<{().[]*};
        option2=${option/"${BASH_REMATCH[1]}"/};
            option=${BASH_REMATCH[1]};
                option=$i;
    option=${option%%[<{().[]*};
        option=${option/"${BASH_REMATCH[1]}"/"${BASH_REMATCH[2]}"};
OSTYPE=linux-gnu
    [[ $OSTYPE == *linux* ]] && var=_$var;
                outx=$OPTARG
                    p="";
                p="<>"
                p="<"
                p="="
                p=">"
                p=""
                p=""
            p)
            p)
PAPERSIZE=letter
    param="$dashoptions            $( apt-cache pkgnames $cur 2> /dev/null )            $( command ps axo pid | sed 1d )            $( _apport_symptoms )            $( compgen -G "${cur}*" )";
            param="-P --pid -p --package -s --symptom";
_parse_help () 
__parse_options () 
        __parse_options "${line// or /, }";
                    __parse_options "$option"
_parse_usage () 
PATH=/home/fywest/anaconda3/bin:/home/fywest/bin:/home/fywest/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
    PATH=$PATH:/usr/sbin:/sbin:/usr/local/sbin type $1 &> /dev/null
_pci_ids () 
            pcmode=yes;
_pgids () 
_pids () 
PIPESTATUS=([0]="0" [1]="0")
_pnames () 
        -p | --package)
        -P | --pager)
                p="$p ${__git_ps1_upstream_name}";
                p="$p \${__git_ps1_upstream_name}";
PPID=2187
        -p | --preprocessor)
            prefix=${cur%%*([^:])};
                prefix=$OPTARG
            prefix=${prefix//\\};
            prev)
    prev=${COMP_WORDS[COMP_CWORD-1]};
    prev=${COMP_WORDS[COMP_CWORD-1]};
    prev=${COMP_WORDS[COMP_CWORD-1]};
    prev=${COMP_WORDS[COMP_CWORD-1]};
    prev=${COMP_WORDS[COMP_CWORD-1]};
    prev=${COMP_WORDS[COMP_CWORD-1]};
    prev=${COMP_WORDS[COMP_CWORD-1]};
    prev=${COMP_WORDS[COMP_CWORD-1]};
    prev=${COMP_WORDS[COMP_CWORD-1]};
    prev=${COMP_WORDS[COMP_CWORD-1]};
    prev=${COMP_WORDS[COMP_CWORD-1]};
        prev="${cur%%?(\\)=*}";
    [[ "$prev" == $mansect ]] && sect=$prev || sect='*';
    prev=${words[cword-1]};
                printf %d "${1#-a}" &> /dev/null || { 
            printf_format="${1:-$printf_format}"
            printf_format="${3:-$printf_format}";
        printf -- "$printf_format" "$gitstring";
            printf "%s: command not found\n" "$1" 1>&2;
                printf "%s" "${cur:0:$index}";
    printf %s ${n:-1}
    printf '%s\n' "${option/=*/=}"
        printf '%s\n' "${option2/=*/=}";
            printf '%s\n' $tmp
                 printf '%s\n' ${tmp%.mod}
    printf "'%s'" "$quoted"
    printf %s "$ret"
                printf "%s" "${words[cword]}";
            printf "%s" "${words[cword]}";
        printf "%s" "${words[cword-$2]}";
            printf -v "$2[i]" %s "${COMP_WORDS[i]}";
                printf -v $2 %q "$1";
                printf -v $2 \~%q "${1:1}";
        printf -v $2 %s "$1";
            printf -v $2 %s "${1:1}";
    printf -v "$3" %s "$COMP_CWORD";
            printf -v gitstring -- "$printf_format" "$gitstring";
                printf -v "$ref" %s "${!ref}${COMP_WORDS[i]}";
            printf -v "$ref" %s "${!ref}${COMP_WORDS[i]}";
        prog="$1";
        prog="$1";
        prog="${COMP_WORDS[0]}";
        prog="${COMP_WORDS[0]}";
PS1='\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
            ps1pc_end="$2";
            ps1pc_start="$1";
        PS1="$ps1pc_start$gitstring$ps1pc_end";
            PS1="$ps1pc_start$ps1pc_end"
PS2='> '
PS4='+ '
                p=" u="
                p=" u-${count%	0}"
                p=" u+${count#0	}"
                p=" u+${count#*	}-${count%	*}"
PWD=/home/fywest/linux
QT4_IM_MODULE=xim
QT_ACCESSIBILITY=1
QT_IM_MODULE=ibus
QT_QPA_PLATFORMTHEME=appmenu-qt5
quote () 
quote_readline () 
_quote_readline_by_ref () 
    _quote_readline_by_ref "$1" ret;
        _quote_readline_by_ref "$cur" quoted;
                    r="|AM";
                    r="|AM/REBASE";
                            r="|BISECTING";
    r="$c_clear$r"
                    r="|CHERRY-PICKING";
        [[ -r $configfile ]] && config+=("$configfile");
' read "$2" < "$1"
    read -a array <<< "$1";
                    readlink -f "$(type -P "$1")";
_realcommand () 
            realpath "$(type -P "$1")";
__reassemble_comp_words_by_ref () 
    __reassemble_comp_words_by_ref "$1" words cword;
    __reassemble_comp_words_by_ref "$1" words cword;
    __reassemble_comp_words_by_ref "$1" words cword;
                ref="$2[$j]";
            ref="$2[$j]";
    repo_info="$(git rev-parse --git-dir --is-inside-git-dir 		--is-bare-repository --is-inside-work-tree 		--short HEAD 2>/dev/null)";
        repo_info="${repo_info%
    repo_info="${repo_info%
    repo_info="${repo_info%
        $reset;
    $reset;
' reset=$(shopt -p nullglob);
' reset=$(shopt -p nullglob);
        result=${#COMPREPLY[@]};
        [[ $result -gt 0 ]] && compopt -o filenames 2> /dev/null;
    return
            return
            return
            return
            return
            return
            return
            return
            return
            return
            return
            return
            return
            return
            return
            return
            return
            return
                return
                return
                    return
                    return
                    return;
                return;
            return $?;
        return $?;
        return;
        return;
        return;
        return;
                        return 0
                return 0;
            return 0
            return 0
            return 0
            return 0;
        return 0;
        return 0;
    return 0
                    return 1
                    return 1
                    return 1
                    return 1
                return 1
                return 1
        return 1;
    return 1
    return 1
    return 1
            return 127;
        return 2;
            return ${#COMPREPLY[@]};
                    return $exit;
            return $exit
        return $exit;
        return $exit;
    return $exit
    return $result
    rev_parse_exit_code="$?";
            [[ -r $i ]] && config+=("$i");
            [[ -r $i ]] && kh+=("$i");
                [[ -r $j ]] && kh+=("$j");
                [[ -r $j ]] && kh+=("$j");
_rl_enabled () 
                r="|MERGING";
_root_command () 
                r="|REBASE";
            r="|REBASE-i";
            r="|REBASE-m";
                        r="|REVERTING";
        r="$r $step/$total";
                s="$";
            /^\s*[^|\#]/ {
            s)
        --save)
        --save)
            "s:.*/::" -e \
            "s/^[[(-]//" -e \
            "s/ .*//" -e \
            "s/:$//" -e \
_service () 
        _services;
_services () 
SESSION_MANAGER=local/x1-VirtualBox:@/tmp/.ICE-unix/1430,unix/x1-VirtualBox:/tmp/.ICE-unix/1430
    set -- "$@";
        s="$flags_color$s";
SHELL=/bin/bash
SHELLOPTS=braceexpand:emacs:hashall:histexpand:history:interactive-comments:monitor
_shells () 
        [[ $shell == /* && $shell == "$cur"* ]] && COMPREPLY+=($shell);
    shift;
SHLVL=1
    shopt -q extglob && g=1;
        shopt -s nullglob;
    shopt -s nullglob;
        short_sha="${repo_info##*
_signals () 
                split=false;
_split_longopt () 
    _split_longopt && split=true;
    _split_longopt && split=true;
    _split_longopt && split=true;
    _split_longopt && split=true;
    _split_longopt && split=true;
    $split && return;
    $split && return;
    $split && return;
    $split && return 0;
    $split && return 0;
    $split && return 0;
    $split && return 0;
    $split && return 0;
            s="-S/"
SSH_AGENT_PID=1582
SSH_AUTH_SOCK=/run/user/1002/keyring/ssh
            "s/[])]$//" | sort -u )' -- "$cur" ));
        -s | --symptom)
            sub("^@[^ ]+ +", ""); \
            sub(" .*$", ""); \
            sub("^\\[", "", $i); sub("\\](:[0-9]+)?$", "", $i); \
                suffix=':'
        svn*)
    svn_remote=();
                svn_remote[$((${#svn_remote[@]} + 1))]="$value";
            svn-remote.*.url)
            svn_upstream=($(git log --first-parent -1 					--grep="^git-svn-id: \(${svn_url_pattern#??}\)" 2>/dev/null));
                svn_upstream=${svn_upstream%@*};
                    svn_upstream=${svn_upstream#${svn_remote[$n]}};
                svn_upstream=${svn_upstream[${#svn_upstream[@]} - 2]};
                svn_url_pattern="$svn_url_pattern\\|$value";
                syms="$syms ${FILE%.py}";
        _sysvdirs;
    _sysvdirs;
    sysvdirs=();
_sysvdirs () 
            ${sysvdirs[0]}/${prev##*/} 2>/dev/null` start stop' -- "$cur" ));
                                $t)
        --tag)
				(tag)
temp_env=shiyanlou
temp=shiyanlou
_terms () 
TERM=xterm-256color
    test $g -eq 0 && shopt -s extglob;
                test $g -eq 0 && shopt -u extglob;
    test $g -eq 0 && shopt -u extglob
    test -r "$1" && IFS='
TEXTDOMAINDIR=/usr/share/locale/
TEXTDOMAIN=im-config
_tilde () 
            _tilde "$cur" || eval COMPREPLY[0]=$(printf ~%q "${COMPREPLY[0]#\~}");
    _tilde "$cur" || return;
    _tilde "$cur" || return;
        tmpkh=($( awk 'sub("^[ \t]*([Gg][Ll][Oo][Bb][Aa][Ll]|[Uu][Ss][Ee][Rr])[Kk][Nn][Oo][Ww][Nn][Hh][Oo][Ss][Tt][Ss][Ff][Ii][Ll][Ee][ \t]+", "") { print $0 }' "${config[@]}" | sort -u ));
                 tmp=${tmp##*/}
    toks=($(
    toks+=($(
            toks+=("$tmp");
            toks+=("$tmp");
        toks+=("$tmp");
        -t | --target)
                    type -P "$1";
    type -P "$1" > /dev/null && { 
                    TZ)
        u="$bad_color$u";
        ubuntu-bug | apport-bug)
UID=1002
_uids () 
        unopkg)
                                unset 'COMPREPLY[i]';
        unset 'COMP_WORDS[i]';
                unset __git_ps1_upstream_name;
        upargs+=(-a${#words[@]} $vwords "${words[@]}")
        upargs+=(-v $vcur "$cur")
        upargs+=(-v $vcword "$cword")
        upargs+=(-v $vprev "${words[cword - 1]}")
                    upstream=${GIT_SVN_ID:-git-svn};
                upstream="$option"
                upstream=svn+git
                    upstream=${svn_upstream#/};
                    upstream="@{upstream}";
            upstream="@{upstream}"
_upvar () 
_upvars () 
    (( ${#upvars[@]} )) && local "${upvars[@]}" && _upvars "${upargs[@]}"
        upvars+=("$vcur");
        upvars+=("$vcword");
        upvars+=("$vprev");
        upvars+=("$vwords");
_usb_ids () 
_user_at_host () 
USER=fywest
_usergroup () 
_userland () 
    [[ $userland == $1 ]]
    [[ $userland == @(Linux|GNU/*) ]] && userland=GNU;
USERNAME=fywest
        /usr/lib/command-not-found -- "$1";
            /usr/share/command-not-found/command-not-found -- "$1";
                u="%${ZSH_VERSION+%}";
            -v)
_variables () 
    _variables && return 1;
            vars=($( compgen -A variable -P ${BASH_REMATCH[1]} -S '}' -- ${BASH_REMATCH[3]} )) && arrs=($( compgen -A arrayvar -P ${BASH_REMATCH[1]} -S '[' -- ${BASH_REMATCH[3]} ));
                vcur=cur
                vcur=$OPTARG
                vcword=cword
                vcword=$OPTARG
            verbose)
                verbose=1
                vprev=$OPTARG
                vprev=prev
VTE_VERSION=5202
                vwords=$OPTARG
                vwords=words
            w)
        w="$bad_color$w";
                while [[ $cspec == *" -o "* ]]; do
                while [[ "${#cur}" -ge ${#words[i]} && "${cur:0:${#words[i]}}" != "${words[i]}" ]]; do
            while [[ ${#cur} -ge ${#words[i]} && "${cur:0:${#words[i]}}" != "${words[i]}" ]]; do
    while (( $# )); do
    while [[ $# -ge $OPTIND ]]; do
    while getopts "ac46F:p:" flag "$@"; do
    while getopts "c:i:n:p:w:" flag "$@"; do
    while getopts "n:e:o:i:s" flag "$@"; do
            while [[ $i =~ ^([^\"]*)\"([^\"]*)\"(.*)$ ]]; do
        while [[ $((--i)) -ge 0 ]]; do
            while [[ $i -gt 0 && ${COMP_WORDS[$i]} == +([$exclude]) ]]; do
        while [[ $line =~ ((^|[^-])-[A-Za-z0-9?][[:space:]]+)\[?[A-Z0-9]+\]? ]]; do
        while [[ $line =~ \[[[:space:]]*(-[^]]+)[[:space:]]*\] ]]; do
    while read -r key value; do
    } | while read -r line; do
    } | while read -r line; do
    while read -r shell rest; do
         while read -r tmp; do
        while read -r tmp; do
        while read -r tmp; do
WINDOWPATH=2
            words)
            [[ ${words[i]} == $redir ]] && skip=2 || skip=1;
            words=("${words[@]:0:i}" "${words[@]:i+skip}");
        -w | --window)
        -w | --window)
XAUTHORITY=/run/user/1002/gdm/Xauthority
    x=$( compgen -d -- "$cur" ) && while read -r tmp; do
        x=$( compgen -f -X "$xspec" -- $quoted ) && while read -r tmp; do
XDG_CONFIG_DIRS=/etc/xdg/xdg-ubuntu:/etc/xdg
XDG_CURRENT_DESKTOP=ubuntu:GNOME
XDG_DATA_DIRS=/usr/share/ubuntu:/usr/local/share:/usr/share:/var/lib/snapd/desktop:/var/lib/snapd/desktop
XDG_MENU_PREFIX=gnome-
XDG_RUNTIME_DIR=/run/user/1002
XDG_SEAT=seat0
XDG_SESSION_DESKTOP=ubuntu
XDG_SESSION_ID=2
XDG_SESSION_TYPE=x11
XDG_VTNR=2
_xfunc () 
_xinetd_services () 
XMODIFIERS=@im=ibus
                        xspec=$errx
                xspec=$errx
                        xspec=$inx
                xspec=$inx
    xspec="$matchop($xspec|${xspec^^})";
                        xspec=$outx
                xspec=$outx
_xspecs=([freeamp]="!*.@(mp3|og[ag]|pls|m3u)" [bibtex]="!*.aux" [lualatex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [chromium-browser]="!*.@(?([xX]|[sS])[hH][tT][mM]?([lL])|[pP][dD][fF])" [tex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [zathura]="!*.@(cb[rz7t]|djv?(u)|?(e)ps|pdf)" [lrunzip]="!*.lrz" [amaya]="!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))" [hbpp]="!*.@([Pp][Rr][Gg]|[Cc][Ll][Pp])" [lzgrep]="!*.@(tlz|lzma)" [ggv]="!*.@(@(?(e)ps|?(E)PS|pdf|PDF)?(.gz|.GZ|.bz2|.BZ2|.Z))" [lzless]="!*.@(tlz|lzma)" [loimpress]="!*.@(sxi|sti|pps?(x)|ppt?([mx])|pot?([mx])|?(f)odp|otp)" [kdvi]="!*.@(dvi|DVI)?(.@(gz|Z|bz2))" [lobase]="!*.odb" [lbzcat]="!*.?(t)bz?(2)" [lilypond]="!*.ly" [sxemacs]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [epdfview]="!*.pdf" [localc]="!*.@(sxc|stc|xls?([bmx])|xlw|xlt?([mx])|[ct]sv|?(f)ods|ots)" [texi2dvi]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [ps2pdf12]="!*.@(?(e)ps|pdf)" [ee]="!*.@(gif|jp?(e)g|miff|tif?(f)|pn[gm]|p[bgp]m|bmp|xpm|ico|xwd|tga|pcx)" [lbunzip2]="!*.?(t)bz?(2)" [ps2pdf13]="!*.@(?(e)ps|pdf)" [ps2pdf14]="!*.@(?(e)ps|pdf)" [lzfgrep]="!*.@(tlz|lzma)" [hbrun]="!*.[Hh][Rr][Bb]" [kbabel]="!*.po" [rview]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [kaffeine]="!*@(.@(mp?(e)g|MP?(E)G|wm[av]|WM[AV]|avi|AVI|asf|vob|VOB|bin|dat|divx|DIVX|vcd|ps|pes|fli|flv|FLV|fxm|FXM|viv|rm|ram|yuv|mov|MOV|qt|QT|web[am]|WEB[AM]|mp[234]|MP[234]|m?(p)4[av]|M?(P)4[AV]|mkv|MKV|og[agmvx]|OG[AGMVX]|t[ps]|T[PS]|m2t?(s)|M2T?(S)|mts|MTS|wav|WAV|flac|FLAC|asx|ASX|mng|MNG|srt|m[eo]d|M[EO]D|s[3t]m|S[3T]M|it|IT|xm|XM|iso|ISO)|+([0-9]).@(vdr|VDR))?(.part)" [xv]="!*.@(gif|jp?(e)g?(2)|j2[ck]|jp[2f]|tif?(f)|png|p[bgp]m|bmp|x[bp]m|rle|rgb|pcx|fits|pm|?(e)ps)" [rgvim]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [oodraw]="!*.@(sxd|std|sda|sdd|?(f)odg|otg)" [elinks]="!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))" [playmidi]="!*.@(mid?(i)|cmf)" [xine]="!*@(.@(mp?(e)g|MP?(E)G|wm[av]|WM[AV]|avi|AVI|asf|vob|VOB|bin|dat|divx|DIVX|vcd|ps|pes|fli|flv|FLV|fxm|FXM|viv|rm|ram|yuv|mov|MOV|qt|QT|web[am]|WEB[AM]|mp[234]|MP[234]|m?(p)4[av]|M?(P)4[AV]|mkv|MKV|og[agmvx]|OG[AGMVX]|t[ps]|T[PS]|m2t?(s)|M2T?(S)|mts|MTS|wav|WAV|flac|FLAC|asx|ASX|mng|MNG|srt|m[eo]d|M[EO]D|s[3t]m|S[3T]M|it|IT|xm|XM)|+([0-9]).@(vdr|VDR))?(.part)" [xpdf]="!*.@(pdf|fdf)?(.@(gz|GZ|bz2|BZ2|Z))" [aviplay]="!*.@(avi|asf|wmv)" [latex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [lodraw]="!*.@(sxd|std|sda|sdd|?(f)odg|otg)" [rvim]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [ogg123]="!*.@(og[ag]|m3u|flac|spx)" [ps2pdfwr]="!*.@(?(e)ps|pdf)" [harbour]="!*.@([Pp][Rr][Gg]|[Cc][Ll][Pp])" [lomath]="!*.@(sxm|smf|mml|odf)" [xemacs]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [unlzma]="!*.@(tlz|lzma)" [lowriter]="!*.@(sxw|stw|sxg|sgl|doc?([mx])|dot?([mx])|rtf|txt|htm|html|?(f)odt|ott|odm|pdf)" [vi]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [xetex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [gvim]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [kid3-qt]="!*.@(mp[234c]|og[ag]|@(fl|a)ac|m4[abp]|spx|tta|w?(a)v|wma|aif?(f)|asf|ape)" [xanim]="!*.@(mpg|mpeg|avi|mov|qt)" [portecle]="!@(*.@(ks|jks|jceks|p12|pfx|bks|ubr|gkr|cer|crt|cert|p7b|pkipath|pem|p10|csr|crl)|cacerts)" [oocalc]="!*.@(sxc|stc|xls?([bmx])|xlw|xlt?([mx])|[ct]sv|?(f)ods|ots)" [emacs]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [fbxine]="!*@(.@(mp?(e)g|MP?(E)G|wm[av]|WM[AV]|avi|AVI|asf|vob|VOB|bin|dat|divx|DIVX|vcd|ps|pes|fli|flv|FLV|fxm|FXM|viv|rm|ram|yuv|mov|MOV|qt|QT|web[am]|WEB[AM]|mp[234]|MP[234]|m?(p)4[av]|M?(P)4[AV]|mkv|MKV|og[agmvx]|OG[AGMVX]|t[ps]|T[PS]|m2t?(s)|M2T?(S)|mts|MTS|wav|WAV|flac|FLAC|asx|ASX|mng|MNG|srt|m[eo]d|M[EO]D|s[3t]m|S[3T]M|it|IT|xm|XM)|+([0-9]).@(vdr|VDR))?(.part)" [kpdf]="!*.@(?(e)ps|pdf)" [oomath]="!*.@(sxm|smf|mml|odf)" [compress]="*.Z" [iceweasel]="!*.@(?([xX]|[sS])[hH][tT][mM]?([lL])|[pP][dD][fF])" [zcat]="!*.@(Z|[gGd]z|t[ag]z)" [unzip]="!*.@(zip|[egjsw]ar|exe|pk3|wsz|zargo|xpi|s[tx][cdiw]|sx[gm]|o[dt][tspgfc]|od[bm]|oxt|epub|apk|ipa|do[ct][xm]|p[op]t[mx]|xl[st][xm]|pyz)" [modplug123]="!*.@(669|abc|am[fs]|d[bs]m|dmf|far|it|mdl|m[eo]d|mid?(i)|mt[2m]|oct|okt?(a)|p[st]m|s[3t]m|ult|umx|wav|xm)" [dvipdfm]="!*.dvi" [oobase]="!*.odb" [zipinfo]="!*.@(zip|[egjsw]ar|exe|pk3|wsz|zargo|xpi|s[tx][cdiw]|sx[gm]|o[dt][tspgfc]|od[bm]|oxt|epub|apk|ipa|do[ct][xm]|p[op]t[mx]|xl[st][xm]|pyz)" [epiphany]="!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))" [galeon]="!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))" [bzme]="!*.@(zip|z|gz|tgz)" [xfig]="!*.fig" [xdvi]="!*.@(dvi|DVI)?(.@(gz|Z|bz2))" [cdiff]="!*.@(dif?(f)|?(d)patch)?(.@([gx]z|bz2|lzma))" [rgview]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [oowriter]="!*.@(sxw|stw|sxg|sgl|doc?([mx])|dot?([mx])|rtf|txt|htm|html|?(f)odt|ott|odm|pdf)" [netscape]="!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))" [acroread]="!*.[pf]df" [makeinfo]="!*.texi*" [kwrite]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [gview]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [qiv]="!*.@(gif|jp?(e)g|tif?(f)|png|p[bgp]m|bmp|x[bp]m|rle|rgb|pcx|fits|pm|svg)" [bzcat]="!*.?(t)bz?(2)" [pdftex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [rpm2cpio]="!*.[rs]pm" [view]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [unxz]="!*.@(?(t)xz|tlz|lzma)" [ly2dvi]="!*.ly" [mozilla]="!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))" [modplugplay]="!*.@(669|abc|am[fs]|d[bs]m|dmf|far|it|mdl|m[eo]d|mid?(i)|mt[2m]|oct|okt?(a)|p[st]m|s[3t]m|ult|umx|wav|xm)" [dillo]="!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))" [aaxine]="!*@(.@(mp?(e)g|MP?(E)G|wm[av]|WM[AV]|avi|AVI|asf|vob|VOB|bin|dat|divx|DIVX|vcd|ps|pes|fli|flv|FLV|fxm|FXM|viv|rm|ram|yuv|mov|MOV|qt|QT|web[am]|WEB[AM]|mp[234]|MP[234]|m?(p)4[av]|M?(P)4[AV]|mkv|MKV|og[agmvx]|OG[AGMVX]|t[ps]|T[PS]|m2t?(s)|M2T?(S)|mts|MTS|wav|WAV|flac|FLAC|asx|ASX|mng|MNG|srt|m[eo]d|M[EO]D|s[3t]m|S[3T]M|it|IT|xm|XM)|+([0-9]).@(vdr|VDR))?(.part)" [dvipdfmx]="!*.dvi" [advi]="!*.dvi" [lzmore]="!*.@(tlz|lzma)" [poedit]="!*.po" [firefox]="!*.@(?([xX]|[sS])[hH][tT][mM]?([lL])|[pP][dD][fF])" [gv]="!*.@(@(?(e)ps|?(E)PS|pdf|PDF)?(.gz|.GZ|.bz2|.BZ2|.Z))" [madplay]="!*.mp3" [gtranslator]="!*.po" [jadetex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [gpdf]="!*.[pf]df" [kghostview]="!*.@(@(?(e)ps|?(E)PS|pdf|PDF)?(.gz|.GZ|.bz2|.BZ2|.Z))" [pbzcat]="!*.?(t)bz?(2)" [lzcat]="!*.@(tlz|lzma)" [vim]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [dvips]="!*.dvi" [pdfunite]="!*.pdf" [dvitype]="!*.dvi" [realplay]="!*.@(rm?(j)|ra?(m)|smi?(l))" [gqmpeg]="!*.@(mp3|og[ag]|pls|m3u)" [xelatex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [lzegrep]="!*.@(tlz|lzma)" [bunzip2]="!*.?(t)bz?(2)" [znew]="*.Z" [lokalize]="!*.po" [kate]="*.@([ao]|so|so.!(conf|*/*)|[rs]pm|gif|jp?(e)g|mp3|mp?(e)g|avi|asf|ogg|class)" [dragon]="!*@(.@(mp?(e)g|MP?(E)G|wm[av]|WM[AV]|avi|AVI|asf|vob|VOB|bin|dat|divx|DIVX|vcd|ps|pes|fli|flv|FLV|fxm|FXM|viv|rm|ram|yuv|mov|MOV|qt|QT|web[am]|WEB[AM]|mp[234]|MP[234]|m?(p)4[av]|M?(P)4[AV]|mkv|MKV|og[agmvx]|OG[AGMVX]|t[ps]|T[PS]|m2t?(s)|M2T?(S)|mts|MTS|wav|WAV|flac|FLAC|asx|ASX|mng|MNG|srt|m[eo]d|M[EO]D|s[3t]m|S[3T]M|it|IT|xm|XM|iso|ISO)|+([0-9]).@(vdr|VDR))?(.part)" [pdflatex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [mozilla-firefox]="!*.@(?([xX]|[sS])[hH][tT][mM]?([lL])|[pP][dD][fF])" [ooimpress]="!*.@(sxi|sti|pps?(x)|ppt?([mx])|pot?([mx])|?(f)odp|otp)" [uncompress]="!*.Z" [unpigz]="!*.@(Z|[gGdz]z|t[ag]z)" [luatex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [lynx]="!*.@(?([xX]|[sS])[hH][tT][mM]?([lL]))" [ps2pdf]="!*.@(?(e)ps|pdf)" [mpg321]="!*.mp3" [mpg123]="!*.mp3" [pbunzip2]="!*.?(t)bz?(2)" [kid3]="!*.@(mp[234c]|og[ag]|@(fl|a)ac|m4[abp]|spx|tta|w?(a)v|wma|aif?(f)|asf|ape)" [pdfjadetex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [dvipdf]="!*.dvi" [gharbour]="!*.@([Pp][Rr][Gg]|[Cc][Ll][Pp])" [texi2html]="!*.texi*" [gunzip]="!*.@(Z|[gGd]z|t[ag]z)" [google-chrome]="!*.@(?([xX]|[sS])[hH][tT][mM]?([lL])|[pP][dD][fF])" [okular]="!*.@(okular|@(?(e|x)ps|?(E|X)PS|[pf]df|[PF]DF|dvi|DVI|cb[rz]|CB[RZ]|djv?(u)|DJV?(U)|dvi|DVI|gif|jp?(e)g|miff|tif?(f)|pn[gm]|p[bgp]m|bmp|xpm|ico|xwd|tga|pcx|GIF|JP?(E)G|MIFF|TIF?(F)|PN[GM]|P[BGP]M|BMP|XPM|ICO|XWD|TGA|PCX|epub|EPUB|odt|ODT|fb?(2)|FB?(2)|mobi|MOBI|g3|G3|chm|CHM)?(.?(gz|GZ|bz2|BZ2)))" [slitex]="!*.@(?(la)tex|texi|dtx|ins|ltx|dbj)" [xzcat]="!*.@(?(t)xz|tlz|lzma)" [timidity]="!*.@(mid?(i)|rmi|rcp|[gr]36|g18|mod|xm|it|x3m|s[3t]m|kar)" [dviselect]="!*.dvi" )
        xspec=${xspec#!};
' xspec=${_xspecs[${1##*/}]} tmp;
    [ -z "${BASH_VERSION-}" ] || shopt -q promptvars || ps1_expanded=no;
    z="$c_clear$z";
    [[ -z $manpath ]] && manpath="/usr/share/man:/usr/local/share/man";
    [ -z "${ZSH_VERSION-}" ] || [[ -o PROMPT_SUBST ]] || ps1_expanded=no;
